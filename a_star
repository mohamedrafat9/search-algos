tree_data = {
    'A': [('B', 2), ('C', 1)],
    'B': [('D', 3), ('E', 1)],
    'C': [('E', 4)],
    'D': [('F', 5)],
    'E': [('F', 2)],
    'F': [('G', 1)],
    'G': []
}
heuristics = {
    'A': 7, 
    'B': 6, 
    'C': 4, 
    'D': 5,
    'E': 3, 
    'F': 2, 
    'G': 0
}
def totalCost(path):
    lastnode=path[-1][0]
    tot=0
    for i in path:
        tot+=i[1]
    return tot+heuristics[lastnode]

def alpha(path):
    return(totalCost(path),path[-1][0])

def astar(start,goal):
    pqueue=[[(start,0)]]
    visited={}

    while pqueue:
        pqueue.sort(key=alpha)
        path=pqueue.pop(0)
        node=path[-1][0]
        cost=totalCost(path)
        

        if node in visited and visited[node] <= cost:
            continue
        visited[node]=cost

        if node == goal :
            return path
        
        for (next_node,nodecost) in tree_data.get(node,[]):
            new_path=path.copy()
            new_path.append((next_node,nodecost))#[(a,0),(b,2)]
            pqueue.append(new_path)

    return None
sol=astar('A','G')
pcost=totalCost(sol)
print(f"the path is {sol} and its cost is {pcost}")
